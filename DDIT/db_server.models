# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=80)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class DditPmList(models.Model):
    create_at = models.DateTimeField()
    update_at = models.DateTimeField()
    contract_id = models.CharField(max_length=128, blank=True, null=True)
    contract_start = models.CharField(max_length=128, blank=True, null=True)
    contract_end = models.CharField(max_length=128, blank=True, null=True)
    contract_price = models.CharField(max_length=128, blank=True, null=True)
    contract_work = models.CharField(max_length=128, blank=True, null=True)
    pid = models.CharField(unique=True, max_length=128)
    father_name = models.CharField(max_length=128)
    child_name = models.CharField(max_length=128)
    service2in = models.CharField(max_length=128, blank=True, null=True)
    service2out = models.CharField(max_length=128, blank=True, null=True)
    operator = models.CharField(max_length=128)
    manager = models.CharField(max_length=128)
    date_time = models.CharField(max_length=128, blank=True, null=True)
    manage = models.CharField(db_column='Manage', max_length=128, blank=True, null=True)  # Field name made lowercase.
    step = models.CharField(max_length=10)
    desc = models.CharField(max_length=128, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ddit_PM_list'


class DditRole2Menu(models.Model):
    menu = models.ForeignKey('DditMenu', models.DO_NOTHING, blank=True, null=True)
    rid = models.ForeignKey(AuthUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ddit_Role2Menu'


class DditWorkHours(models.Model):
    create_at = models.DateTimeField()
    update_at = models.DateTimeField()
    arr1 = models.FloatField(blank=True, null=True)
    arr2 = models.FloatField(blank=True, null=True)
    arr3 = models.FloatField(blank=True, null=True)
    arr4 = models.FloatField(blank=True, null=True)
    arr5 = models.FloatField(blank=True, null=True)
    arr6 = models.FloatField(blank=True, null=True)
    arr7 = models.FloatField(blank=True, null=True)
    arr8 = models.FloatField(blank=True, null=True)
    arr9 = models.FloatField(blank=True, null=True)
    arr10 = models.FloatField(blank=True, null=True)
    arr11 = models.FloatField(blank=True, null=True)
    arr12 = models.FloatField(blank=True, null=True)
    date = models.CharField(max_length=32, blank=True, null=True)
    item = models.ForeignKey(DditPmList, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ddit_Work_hours'


class DditAssets(models.Model):
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    asset_user = models.CharField(max_length=128)
    asset_info = models.ForeignKey('DditReserves', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'ddit_assets'


class DditAssetsLog(models.Model):
    create_at = models.DateTimeField()
    action = models.SmallIntegerField()
    operator = models.CharField(max_length=64, blank=True, null=True)
    asset_no = models.CharField(max_length=256, blank=True, null=True)
    asset_status = models.CharField(max_length=128, blank=True, null=True)
    desc = models.CharField(max_length=256, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ddit_assets_log'


class DditCompany(models.Model):
    create_at = models.DateTimeField()
    update_at = models.DateTimeField()
    name = models.CharField(max_length=128)
    contacts = models.CharField(max_length=128)
    phone = models.CharField(max_length=32)
    type = models.CharField(max_length=32)
    address = models.CharField(db_column='Address', max_length=128)  # Field name made lowercase.
    bill = models.CharField(max_length=32)
    buyer = models.CharField(max_length=128)

    class Meta:
        managed = False
        db_table = 'ddit_company'


class DditCreateVm(models.Model):
    create_at = models.DateTimeField()
    update_at = models.DateTimeField()
    proposer = models.CharField(max_length=128)
    dept = models.CharField(max_length=128)
    name = models.CharField(max_length=32)
    host_ip = models.CharField(max_length=39, blank=True, null=True)
    vm_ip = models.CharField(max_length=39, blank=True, null=True)
    cpus = models.SmallIntegerField()
    memory = models.SmallIntegerField()
    disk = models.CharField(max_length=128)
    type = models.CharField(max_length=128)
    os_type = models.CharField(max_length=128)
    end_time = models.DateField(blank=True, null=True)
    on_line = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'ddit_create_vm'


class DditDict(models.Model):
    arr1 = models.CharField(unique=True, max_length=128, blank=True, null=True)
    arr2 = models.CharField(max_length=10, blank=True, null=True)
    arr3 = models.CharField(max_length=128, blank=True, null=True)
    arr4 = models.CharField(max_length=128, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ddit_dict'


class DditHostInfo(models.Model):
    create_at = models.DateTimeField()
    update_at = models.DateTimeField()
    sn = models.CharField(max_length=128, blank=True, null=True)
    name = models.CharField(max_length=128, blank=True, null=True)
    type = models.CharField(max_length=128, blank=True, null=True)
    info = models.TextField()

    class Meta:
        managed = False
        db_table = 'ddit_host_info'


class DditMenu(models.Model):
    cname = models.CharField(max_length=128)
    url = models.CharField(max_length=128, blank=True, null=True)
    name = models.CharField(max_length=128)
    top = models.SmallIntegerField(blank=True, null=True)
    child = models.SmallIntegerField(blank=True, null=True)
    top_no = models.SmallIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ddit_menu'


class DditMonitorHost(models.Model):
    update_at = models.DateTimeField()
    name = models.CharField(max_length=128)
    ip = models.CharField(unique=True, max_length=39)
    user = models.CharField(max_length=32, blank=True, null=True)
    pwd = models.CharField(max_length=256, blank=True, null=True)
    on_line = models.CharField(max_length=256, blank=True, null=True)
    create_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ddit_monitor_host'


class DditMonitorStat(models.Model):
    cpu = models.CharField(max_length=128, blank=True, null=True)
    meminfo = models.CharField(max_length=128, blank=True, null=True)
    diskinfo = models.CharField(max_length=128, blank=True, null=True)
    netinfo = models.CharField(max_length=128, blank=True, null=True)
    create_at = models.DateTimeField(blank=True, null=True)
    ip = models.CharField(max_length=128)

    class Meta:
        managed = False
        db_table = 'ddit_monitor_stat'


class DditOpenPort(models.Model):
    start_time = models.DateField()
    create_at = models.DateTimeField()
    update_at = models.DateTimeField()
    proposer = models.CharField(max_length=128)
    dept = models.CharField(max_length=128)
    rule_name = models.CharField(unique=True, max_length=128)
    desc = models.CharField(max_length=128)
    host_ip = models.CharField(max_length=39)
    type = models.CharField(max_length=32)
    inside_port = models.CharField(max_length=32)
    outside_port = models.CharField(max_length=32)
    end_time = models.DateField(blank=True, null=True)
    on_line = models.CharField(max_length=32, blank=True, null=True)
    interface = models.CharField(max_length=128)

    class Meta:
        managed = False
        db_table = 'ddit_open_port'


class DditPeriod(models.Model):
    create_at = models.DateTimeField()
    update_at = models.DateTimeField()
    name = models.CharField(max_length=128, blank=True, null=True)
    start_at = models.CharField(max_length=128, blank=True, null=True)
    end_at = models.CharField(max_length=128, blank=True, null=True)
    delay = models.CharField(max_length=128, blank=True, null=True)
    plan_no = models.CharField(max_length=128, blank=True, null=True)
    fact_no = models.CharField(max_length=128, blank=True, null=True)
    evaluation = models.CharField(db_column='Evaluation', max_length=128, blank=True, null=True)  # Field name made lowercase.
    no = models.ForeignKey(DditPmList, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'ddit_period'


class DditReserves(models.Model):
    create_at = models.DateTimeField()
    update_at = models.DateTimeField()
    name = models.CharField(max_length=128)
    type = models.CharField(db_column='Type', max_length=32)  # Field name made lowercase.
    asset_no = models.CharField(db_column='asset_No', unique=True, max_length=128)  # Field name made lowercase.
    price = models.SmallIntegerField()
    company = models.CharField(max_length=128)
    contacts = models.CharField(max_length=128)
    manger_user = models.CharField(max_length=128)
    status = models.CharField(max_length=32)
    finance_id = models.CharField(max_length=128, blank=True, null=True)
    info = models.ForeignKey(DditHostInfo, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'ddit_reserves'


class DditServerInfo(models.Model):
    create_at = models.DateTimeField()
    update_at = models.DateTimeField()
    name = models.CharField(max_length=32)
    ip = models.CharField(db_column='IP', unique=True, max_length=39)  # Field name made lowercase.
    os = models.CharField(db_column='OS', max_length=128, blank=True, null=True)  # Field name made lowercase.
    desric = models.CharField(max_length=128, blank=True, null=True)
    status = models.CharField(max_length=128, blank=True, null=True)
    server = models.CharField(max_length=4, blank=True, null=True)
    type = models.CharField(max_length=128, blank=True, null=True)
    true_server = models.CharField(max_length=128, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ddit_server_info'


class DditSystemInfo(models.Model):
    create_at = models.DateTimeField()
    action_type = models.CharField(max_length=128)
    opeater = models.CharField(max_length=128)
    type = models.CharField(max_length=128)
    info = models.CharField(max_length=128)
    host = models.CharField(max_length=128)

    class Meta:
        managed = False
        db_table = 'ddit_system_info'


class DditVmInfo(models.Model):
    create_at = models.DateTimeField()
    action_type = models.CharField(max_length=128)
    opeater = models.CharField(max_length=128)
    type = models.CharField(max_length=128)
    info = models.CharField(max_length=128)
    host = models.CharField(max_length=128)

    class Meta:
        managed = False
        db_table = 'ddit_vm_info'


class DditWifiOpeartionRecord(models.Model):
    created_at = models.DateField(blank=True, null=True)
    action = models.CharField(max_length=128)
    opeartor = models.CharField(max_length=128)
    info = models.TextField()

    class Meta:
        managed = False
        db_table = 'ddit_wifi_opeartion_record'


class DditWifiUserList(models.Model):
    created_at = models.DateField(blank=True, null=True)
    updated_at = models.DateField(blank=True, null=True)
    user = models.CharField(unique=True, max_length=128)
    pwd = models.CharField(max_length=128, blank=True, null=True)
    mode = models.SmallIntegerField()
    expired_at = models.DateField(blank=True, null=True)
    user_type = models.SmallIntegerField()
    started_at = models.DateField(blank=True, null=True)
    dingding_id = models.CharField(max_length=256, blank=True, null=True)
    proposer = models.CharField(max_length=128, blank=True, null=True)
    dept = models.CharField(max_length=128, blank=True, null=True)
    operator = models.CharField(max_length=128, blank=True, null=True)
    max_num = models.SmallIntegerField()
    desc = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ddit_wifi_user_list'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'
